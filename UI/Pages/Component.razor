@using System.Net.Http;
@using BusinessLogicLayer.DTO
@using BusinessLogicLayer.Interfaces.services;
@using System.Net.Http.Formatting;
@using Newtonsoft.Json;
@using System.Text.Json;
@using BusinessLogicLayer.validators;
@page "/api/Group"
@page "/api/Group/{id}"
@page "/check2/{page}"
@using Microsoft.AspNetCore.Components;
@inject IEFGroupService groupService;





<h1>Groups</h1>


<hr />

@if (groupList.Any())
{

    <div class="card-deck">
        @foreach (var group in groupList)
        {
            <div>
                <p><strong>group_number</strong> @group.group_number</p>
                <p><strong>id</strong> @group.id</p>


                <button> <a class="btn btn-danger btn-sm" @onclick="@(() => DeleteGroup(group.id))">del</a> </button>
            </div>


        }
    </div>


    <br />


}




<br />



@if (pageNum == 0)
{
    <label bind="nav">@pageNum</label>
    <button> <a class="btn btn-danger btn-sm" @onclick="@(() => UpdateCurrentCounterValue())">Next page</a> </button>
}
else
{
    <label bind="nav">@pageNum</label>
    <button> <a class="btn btn-danger btn-sm" @onclick="@(() => UpdateCurrentCounterValue())">Next page</a> </button>
   
    
}




@code {



    @functions {

        private List<DataAccessLayer.Entities.Group> groupList = new List<DataAccessLayer.Entities.Group>();



        public int pageNum { get; set; }
        public int a = 0;
        IEnumerable<DataAccessLayer.Entities.Group> groupsPerPages { get; set; }
      
      async  void UpdateCurrentCounterValue()
        {
            if (pageNum == 0)
            {
                pageNum = pageNum + 2;
                groupList = await httpClient.GetJsonAsync<List<DataAccessLayer.Entities.Group>>("https://localhost:44341/check2?page=" + pageNum);
            }
            else
            {
                pageNum++;
                groupList = await httpClient.GetJsonAsync<List<DataAccessLayer.Entities.Group>>("https://localhost:44341/check2?page=" + pageNum);
            }
        }

        protected override async Task OnInitializedAsync() => await GetGroups();

        HttpClient httpClient = new HttpClient();



        private async Task GetGroups() =>
            groupList = await httpClient.GetJsonAsync<List<DataAccessLayer.Entities.Group>>("https://localhost:44341/check2?page=@pageNum");
        // DataAccessLayer.Entities.Group group = new DataAccessLayer.Entities.Group();



        private async void DeleteGroup(int id)
        {
            string baseUrl = "https://localhost:44341";
            string endpoint = $"{baseUrl}/api/Group/{id}";

            //await httpClient.SendJsonAsync(HttpMethod.Delete, endpoint,);
            await httpClient.DeleteAsync(endpoint);
        }

        GroupDTO groupDTO { get; set; } = new GroupDTO();






    }
}
